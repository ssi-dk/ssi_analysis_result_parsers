# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/38_Hinfluenzae_parser.ipynb.

# %% auto 0
__all__ = ['get_biotype_from_gene_presence', 'HinfluenzaeResults', 'legionella_parser', 'legionella_batch_parser']

# %% ../nbs/38_Hinfluenzae_parser.ipynb 3
# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv  # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml  # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore  # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore import (
    test,
)
from fastcore.script import (
    call_parse,
)  # for @call_parse, https://fastcore.fast.ai/script
import json  # for nicely printing json and yaml

# import functions from core module (optional, but most likely needed).
from ssi_analysis_result_parsers import (
    core,
    blast_parser,
)

# from ssi_analysis_result_parsers.blast_parser import extract_presence_absence

# Project specific libraries
from pathlib import Path
import pandas
import numpy
import sys

# %% ../nbs/38_Hinfluenzae_parser.ipynb 6
def get_biotype_from_gene_presence(biotype_gene_presence_dict: Path) -> dict:
    """
    Convert biotype gene presence dict to biotype
    """

    if biotype_gene_presence_dict["indole"] == "1":
        if biotype_gene_presence_dict["urease"] == "1":
            if biotype_gene_presence_dict["ODC"] == "1":
                biotype = "I"
            else:
                biotype = "II"
        else:
            if biotype_gene_presence_dict["ODC"] == "1":
                biotype = "V"
            else:
                biotype = "VII"
    else:
        if biotype_gene_presence_dict["urease"] == "1":
            if biotype_gene_presence_dict["ODC"] == "1":
                biotype = "IV"
            else:
                biotype = "III"
        else:
            if biotype_gene_presence_dict["ODC"] == "1":
                biotype = "VI"
            else:
                biotype = "VIII"
    return {"biotype": biotype}


class HinfluenzaeResults(core.PipelineResults):

    @classmethod
    def from_tool_paths(
        cls, legionella_sbt_results_tsv: Path, lag1_blast_tsv: Path, sample_name=None
    ):
        """
        Alternative constructor for initializing results for single sample,
        Initializes HinfluenzaeResults instance provided paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        hinfluenze_results = cls.summary(
            legionella_sbt_results_tsv=legionella_sbt_results_tsv,
            lag1_blast_tsv=lag1_blast_tsv,
        )
        return cls({sample_name: hinfluenze_results})

    @classmethod
    def from_tool_paths_dict(cls, file_paths: dict):
        """
        Alternative constructor for initializing results for multiple samples,
        Initializes HinfluenzaeResults instance by providing a dictionary of paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        results_dict = {}
        for sample_name, path_dict in file_paths.items():
            hinfluenze_results = cls.summary(
                legionella_sbt_results_tsv=Path(path_dict["sbt_results"]),
                lag1_blast_tsv=Path(path_dict["lag1_blast_results"]),
            )
            results_dict[sample_name] = hinfluenze_results
        return cls(results_dict)

    @classmethod
    def from_tool_paths_dataframe(cls, file_paths_df: pandas.DataFrame):
        """
        Alternative constructor for initializing results for multiple samples,
        Initializes HinfluenzaeResults instance by providing a DataFrame of paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        file_paths_df.replace(numpy.nan, None, inplace=True)
        file_paths = file_paths_df.to_dict(orient="index")
        results_dict = {}
        for sample_name, path_dict in file_paths.items():
            hinfluenze_results = cls.summary(
                legionella_sbt_results_tsv=Path(path_dict["sbt_results"]),
                lag1_blast_tsv=Path(path_dict["lag1_blast_results"]),
            )
            print(hinfluenze_results)
            results_dict[sample_name] = hinfluenze_results
        return cls(results_dict)

    @classmethod
    def from_tool_paths_tsv(cls, tool_paths_tsv: Path):
        """
        Alternative constructor for initializing results for multiple samples,
        Initializes HinfluenzaeResults instance by providing a tsv-file with paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        file_paths_df = pandas.read_csv(tool_paths_tsv, sep="\t")
        file_paths_df.set_index("sample_name", inplace=True, drop=True)
        return cls.from_tool_paths_dataframe(file_paths_df)

    @staticmethod
    def summary(
        ftsI_ariba_tsv: Path,
        biotype_blast_tsv: Path,
    ) -> dict:
        # sbt_results_dict = extract_legionella_sbt(legionella_sbt_results_tsv=legionella_sbt_results_tsv)
        biotype_gene_dict = blast_parser.extract_presence_absence(
            blast_output_tsv=biotype_blast_tsv,
            hits_as_string=False,
            include_match_stats=False,
            gene_names=["indole", "urease", "ODC"],
        )
        biotype_dict = get_biotype_from_gene_presence(
            biotype_gene_presence_dict=biotype_gene_dict
        )
        results_dict = core.update_results_dict(
            biotype_gene_dict, biotype_dict, old_duplicate_key_prefix="_"
        )
        if results_dict is None:
            return {}
        return results_dict

    def __repr__(self):
        return f"< Legionella analysis results object. {len(self.results_df)} samples with {len(self.results_df.columns)} result variables > "

# %% ../nbs/38_Hinfluenzae_parser.ipynb 9
@call_parse
def legionella_parser(
    legionella_sbt_file: Path = None,  # Path "*.sbt.tsv from legionella_sbt program"
    lag_1_blast_output: Path = None,  #  Path to output from lag1_blast. Generated with blastn -query lag-1.fasta -subject assembly.fasta -outfmt "6 qseqid sseqid pident length qlen qstart qend sstart send sseq evalue bitscore"
    output_file: Path = None,  # Path to output tsv
    sample_name: str = None,
) -> None:
    """ """
    hinfluenze_results = HinfluenzaeResults.from_tool_paths(
        legionella_sbt_results_tsv=legionella_sbt_file,
        lag1_blast_tsv=lag_1_blast_output,
        sample_name=sample_name,
    )
    hinfluenze_results.write_tsv(output_file=output_file)


@call_parse
def legionella_batch_parser(
    file_path_tsv: Path = None,  # Path to tsv containing file paths to the outputs from tools to be parsed. Must contain headers "sample_name", "sbt_results", and "lag1_blast_results"
    output_file: Path = None,  # Path to output tsv
) -> None:
    """ """
    hinfluenze_results = HinfluenzaeResults.from_tool_paths_tsv(
        tool_paths_tsv=file_path_tsv
    )
    hinfluenze_results.write_tsv(output_file)
