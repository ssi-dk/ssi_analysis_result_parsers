# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/38_Hinfluenzae_parser.ipynb.

# %% auto 0
__all__ = ['get_biotype_from_gene_presence', 'extract_hicap_results', 'extract_ariba_ftsI_snps', 'HinfluenzaeResults',
           'Hinfluenzae_parser', 'Hinfluenzae_batch_parser']

# %% ../nbs/38_Hinfluenzae_parser.ipynb 3
# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv  # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml  # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore  # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore import (
    test,
)
from fastcore.script import (
    call_parse,
)  # for @call_parse, https://fastcore.fast.ai/script
import json  # for nicely printing json and yaml

# import functions from core module (optional, but most likely needed).
from ssi_analysis_result_parsers import (
    core,
    blast_parser,
)

# from ssi_analysis_result_parsers.blast_parser import extract_presence_absence

# Project specific libraries
from pathlib import Path
import pandas
import numpy
import sys

# %% ../nbs/38_Hinfluenzae_parser.ipynb 6
def get_biotype_from_gene_presence(biotype_gene_presence_dict: Path) -> dict:
    """
    Convert biotype gene presence dict to biotype
    """
    if biotype_gene_presence_dict:
        if not biotype_gene_presence_dict["indole"] == "0":
            if not biotype_gene_presence_dict["urease"] == "0":
                if not biotype_gene_presence_dict["ODC"] == "0":
                    biotype = "I"
                else:
                    biotype = "II"
            else:
                if not biotype_gene_presence_dict["ODC"] == "0":
                    biotype = "V"
                else:
                    biotype = "VII"
        else:
            if not biotype_gene_presence_dict["urease"] == "0":
                if not biotype_gene_presence_dict["ODC"] == "0":
                    biotype = "IV"
                else:
                    biotype = "III"
            else:
                if not biotype_gene_presence_dict["ODC"] == "0":
                    biotype = "VI"
                else:
                    biotype = "VIII"
        return {"biotype": biotype}
    else:
        print(
            f"Nonetype input provided for biotype gene presence. Cannot determine biotype."
        )
        return None


def extract_hicap_results(hicap_tsv: Path):
    if hicap_tsv.exists():
        try:
            df = pandas.read_csv(hicap_tsv, sep="\t")
            if df.shape[0] > 0:
                serotype = df.iloc[0]["predicted_serotype"]
                serotype_attributes = df.iloc[0]["attributes"]
                serotype_genes = df.iloc[0]["genes_identified"]
            else:
                print(f"Hicap output file empty at {hicap_tsv}", file=sys.stderr)
                return None
        except pandas.errors.EmptyDataError:
            print(f"Hicap output file empty at {hicap_tsv}", file=sys.stderr)
            return None
    else:
        serotype = "-"
        serotype_attributes = "no_capsule_genes_found"
        serotype_genes = "-"

    return {
        "serotype": serotype,
        "serotype_attributes": serotype_attributes,
        "serotype_genes": serotype_genes,
    }


def extract_ariba_ftsI_snps(ariba_output_tsv: Path, ftsI_types_tsv: Path):
    if not ftsI_types_tsv.exists():
        print(f"Failed to load ftsI types table at {ftsI_types_tsv}")
        return None
    elif ariba_output_tsv.exists():
        ftsI_types = {}
        ftsI_table_snps = []
        with open(ftsI_types_tsv) as f:
            for line in f:
                line = line.rstrip("\n").split("\t")
                if line[0] == "pos":
                    positions = line[1:]
                elif line[0] == "Ref":
                    refs = line[1:]
                elif line[0] == "Diverse":
                    snps = line[1:]
                    for n in range(len(snps)):
                        snp_split = snps[n].split("/")
                        for snp in snp_split:
                            ftsI_table_snps.append(refs[n] + positions[n] + snp)
                else:
                    type = line[0]
                    vars = line[1:]
                    type_vars = []
                    for n in range(len(vars)):
                        var = vars[n]
                        if var != "" and var != " ":
                            type_vars.append(refs[n] + positions[n] + var)
                    ftsI_types[type] = type_vars

        change_list = []
        ftsI_gene_snps = []
        with open(ariba_output_tsv) as f:
            for line in f:
                line = line.rstrip("\n").split("\t")
                if line[0] != "#ariba_ref_name":
                    change = line[18]
                    ftsI_gene_snps.append(change)
                    if change in ftsI_table_snps:
                        change_list.append(change)

        match_var_counts = {}
        for type in ftsI_types:
            var_list = ftsI_types[type]
            match_var_count = 0
            for var in var_list:
                if var in change_list:
                    match_var_count += 1
            match_var_counts[type] = [match_var_count, len(var_list)]
        best_match = 0
        best_type = "-"
        for type in match_var_counts:
            check_list = match_var_counts[type]
            if check_list[0] == check_list[1] and check_list[0] > best_match:
                best_match = check_list[0]
                best_type = type
    else:
        print(f"No ariba report found at {ariba_output_tsv}")
        return None
    return {
        "ftsI_type": best_type,
        "key_ftsI_snps": ",".join(change_list),
        "all_ftsI_snps": ",".join(ftsI_gene_snps),
    }


class HinfluenzaeResults(core.PipelineResults):

    @classmethod
    def from_tool_paths(
        cls,
        ftsI_ariba_tsv: Path,
        hicap_tsv: Path,
        biotype_blast_tsv: Path,
        ftsI_types_tsv: Path,
        sample_name=None,
    ):
        """
        Alternative constructor for initializing results for single sample,
        Initializes HinfluenzaeResults instance provided paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        hinfluenze_results = cls.summary(
            ftsI_ariba_tsv=ftsI_ariba_tsv,
            hicap_tsv=hicap_tsv,
            biotype_blast_tsv=biotype_blast_tsv,
            ftsI_types_tsv=ftsI_types_tsv,
        )
        return cls({sample_name: hinfluenze_results})

    @classmethod
    def from_tool_paths_dict(cls, file_paths: dict):
        """
        Alternative constructor for initializing results for multiple samples,
        Initializes HinfluenzaeResults instance by providing a dictionary of paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        results_dict = {}
        for sample_name, path_dict in file_paths.items():
            hinfluenze_results = cls.summary(
                ftsI_ariba_tsv=Path(path_dict["ftsI_ariba_results"]),
                hicap_tsv=Path(path_dict["hicap_results"]),
                biotype_blast_tsv=Path(path_dict["biotype_results"]),
                ftsI_types_tsv=Path(path_dict["ftsI_types_tsv"]),
            )
            results_dict[sample_name] = hinfluenze_results
        return cls(results_dict)

    @classmethod
    def from_tool_paths_dataframe(cls, file_paths_df: pandas.DataFrame):
        """
        Alternative constructor for initializing results for multiple samples,
        Initializes HinfluenzaeResults instance by providing a DataFrame of paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        file_paths_df.replace(numpy.nan, None, inplace=True)
        file_paths = file_paths_df.to_dict(orient="index")
        results_dict = {}
        for sample_name, path_dict in file_paths.items():
            hinfluenzae_results = cls.summary(
                ftsI_ariba_tsv=Path(path_dict["ftsI_ariba_results"]),
                hicap_tsv=Path(path_dict["hicap_results"]),
                biotype_blast_tsv=Path(path_dict["biotype_results"]),
                ftsI_types_tsv=Path(path_dict["ftsI_types_tsv"]),
            )
            results_dict[sample_name] = hinfluenzae_results
        return cls(results_dict)

    @classmethod
    def from_tool_paths_tsv(cls, tool_paths_tsv: Path):
        """
        Alternative constructor for initializing results for multiple samples,
        Initializes HinfluenzaeResults instance by providing a tsv-file with paths to outputs from tools (legionella sbt and lag1 presence blast)
        """
        file_paths_df = pandas.read_csv(tool_paths_tsv, sep="\t")
        file_paths_df.set_index("sample_name", inplace=True, drop=True)
        return cls.from_tool_paths_dataframe(file_paths_df)

    @staticmethod
    def summary(
        ftsI_ariba_tsv: Path,
        hicap_tsv: Path,
        biotype_blast_tsv: Path,
        ftsI_types_tsv: Path,
    ) -> dict:
        ftsI_results = extract_ariba_ftsI_snps(
            ariba_output_tsv=ftsI_ariba_tsv, ftsI_types_tsv=ftsI_types_tsv
        )
        hicap_results = extract_hicap_results(hicap_tsv=hicap_tsv)
        biotype_gene_dict = blast_parser.extract_presence_absence(
            blast_output_tsv=biotype_blast_tsv,
            hits_as_string=False,
            include_match_stats=True,
            gene_names=["indole", "urease", "ODC"],
        )
        biotype_results = get_biotype_from_gene_presence(
            biotype_gene_presence_dict=biotype_gene_dict
        )
        results_dict = core.update_results_dict(
            ftsI_results, hicap_results, new_duplicate_key_prefix="hicap:"
        )
        results_dict = core.update_results_dict(
            results_dict, biotype_results, old_duplicate_key_prefix="_"
        )
        results_dict = core.update_results_dict(
            results_dict, biotype_gene_dict, old_duplicate_key_prefix="biotype:"
        )
        if results_dict is None:
            return {}
        return results_dict

    def __repr__(self):
        return f"< Hinfluenzae analysis results object. {len(self.results_df)} samples with {len(self.results_df.columns)} result variables >"

# %% ../nbs/38_Hinfluenzae_parser.ipynb 9
@call_parse
def Hinfluenzae_parser(
    ftsI_ariba_tsv: Path = None,  # Path to report.tsv from ftsI ariba output
    hicap_tsv: Path = None,  #  Path to hicap tsv output
    biotype_blast_tsv: Path = None,  #  Path to output from biotype gene blast. Generated with blastn -query biotype_genes.fasta -subject assembly.fasta -outfmt "6 qseqid sseqid pident length qlen qstart qend sstart send sseq evalue bitscore"
    ftsI_types_tsv: Path = None,  #  Path to table to convert ftsI snps to ftsI types
    output_file: Path = None,  # Path to output tsv
    sample_name: str = None,
) -> None:
    """ """
    hinfluenze_results = HinfluenzaeResults.from_tool_paths(
        ftsI_ariba_tsv=ftsI_ariba_tsv,
        hicap_tsv=hicap_tsv,
        biotype_blast_tsv=biotype_blast_tsv,
        ftsI_types_tsv=ftsI_types_tsv,
        sample_name=sample_name,
    )
    hinfluenze_results.write_tsv(output_file=output_file)


@call_parse
def Hinfluenzae_batch_parser(
    file_path_tsv: Path = None,  # Path to tsv containing file paths to the outputs from tools to be parsed. Must contain headers "sample_name", "sbt_results", and "lag1_blast_results"
    output_file: Path = None,  # Path to output tsv
) -> None:
    """ """
    hinfluenze_results = HinfluenzaeResults.from_tool_paths_tsv(
        tool_paths_tsv=file_path_tsv
    )
    hinfluenze_results.write_tsv(output_file)
